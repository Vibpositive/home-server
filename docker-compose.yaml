version: '3'

services:
  # scheduler:
  #   image: mcuadros/ofelia:latest
  #   container_name: scheduler
  #   depends_on:
  #     - plextraktsync
  #   command: daemon --docker
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   labels:
  #     ofelia.job-run.plextraktsync.schedule: "@every 6h"
  #     ofelia.job-run.plextraktsync.container: "plextraktsync"
  # plextraktsync:
  #   image: ghcr.io/taxel/plextraktsync:latest
  #   container_name: plextraktsync
  #   command: sync
  #   volumes:
  #     - ./plextraktsync:/app/config
# =================================================================================================
  radarr:
    platform: linux/arm64/v8
    image: linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    ports:
      - 7878:7878
    volumes:
      - ./radarr:/config
      - /mnt/media/:/media/
      # - /mnt/1tb/downloading:/mnt/downloads
    environment:
      - PUID=1000
      - PGID=1000
    networks:
      - pi
  sonarr:
    platform: linux/arm64/v8
    image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    ports:
      - 8989:8989
    #   # - 9898:9898
    volumes:
      - ./sonarr:/config
      - /mnt/media/:/media/
    environment:
      - PUID=1000
      - PGID=1000
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:plex
      - TP_ADDON=plex
    # networks:
    #   - media_network
    networks:
      - pi
  prowlarr:
    platform: linux/arm64/v8
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped
    networks:
      - pi
  qbittorrent:
    platform: linux/arm64/v8
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    restart: unless-stopped
    ports:
      - 8080:8080
    #   - 8081:80
    #   - 6881:6881
    #   - 6881:6881/udp
    volumes:
      - ./qbittorrent:/config
      - /mnt/media/:/movies/
      - /mnt/media2/:/shows/
      - ./temp/:/temp/
    environment:
      - PUID=1000
      - PGID=1000
    networks:
      - pi
  # readarr:
  #   image: lscr.io/linuxserver/readarr:develop
  #   container_name: readarr
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #   volumes:
  #     - ./readarr/config:/config
  #     - /mnt/1tb/root:/mnt/root
  #     - /mnt/1tb/books:/mnt/downloads
  #   ports:
  #     - 8787:8787
  #   restart: unless-stopped
  overseerr:
    platform: linux/arm64/v8
    image: sctx/overseerr:latest
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=Asia/Tokyo
    ports:
      - 5055:5055
    volumes:
      - ./overseerr/:/app/config
    restart: unless-stopped
    networks:
      - pi
  # tautulli:
  #   platform: linux/amd64
  #   image: lscr.io/linuxserver/tautulli:latest
  #   container_name: tautulli
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Etc/UTC
  #   volumes:
  #     - ./tautulli:/config
  #   ports:
  #     - 8181:8181
  #   restart: unless-stopped
  # filebot:
  #     container_name: filebot
  #     ports:
  #         - '5800:5800'
  #     volumes:
  #         - ./filebot:/config:rw
  #         - /mnt/media/:/storage:rw
  #     image: jlesage/filebot
  bazarr:
    platform: linux/arm64/v8
    # platform: linux/arm64/v8
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./bazarr/:/config
      - /mnt/media/movies/:/media/movies
      - /mnt/media/shows/:/media/shows
    ports:
      - 6767:6767
    restart: unless-stopped
    networks:
      - pi
  # jackett:
  #   platform: linux/amd64
  #   image: linuxserver/jackett
  #   container_name: jackett
  #   restart: unless-stopped
  #   ports:
  #     - 9117:9117
  #   volumes:
  #     - ./jackett:/config
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #   # networks:
  #   #   - media_network
  flaresolverr:
    platform: linux/arm64/v8
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    ports:
      - 8191:8191
    environment:
      - PUID=1000
      - PGID=1000
    networks:
      - pi
  filebrowser:
    platform: linux/arm64/v8
    container_name: filebrowser
    image: hurlenko/filebrowser
    user: "1000:1000"
    ports:
      - 8088:8080
    volumes:
      - /mnt/media/:/data
      - ./filebrowser/config:/config
    environment:
      - FB_BASEURL=/filebrowser
    restart: always
    networks:
      - pi
  jellyfin:
    platform: linux/arm64/v8
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    devices:
      - "/dev/video10:/dev/video10"
      - "/dev/video11:/dev/video11"
      - "/dev/video12:/dev/video12"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
    volumes:
      - ./jellyfin:/config
      - /mnt/media/shows:/data/tvshows
      - /mnt/media/movies:/data/movies
      - /mnt/media2/shows:/data/tvshows2
      - /mnt/media2/movies:/data/movies2
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    restart: unless-stopped
    networks:
      - pi
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
       - LOG_LEVEL=debug
       - TZ=Asia/Tashkent
    ports:
       - 5056:5055
    volumes:
       - ./jellyseerr:/app/config
    restart: unless-stopped
#  prometheus:
#    platform: linux/arm64/v8
#    image: prom/prometheus:latest
#    container_name: monitoring_prometheus
#    restart: unless-stopped
#    volumes:
#      - ./prometheus/config:/etc/prometheus/
#      - ./prometheus/data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#    expose:
#      - 9090
#    ports:
#      - 9090:9090
#    links:
#      - cadvisor:cadvisor
#      - node-exporter:node-exporter
#    networks:
#      - pi

#  node-exporter:
#    platform: linux/arm64/v8
#    image: prom/node-exporter:latest
#    container_name: monitoring_node_exporter
#    restart: unless-stopped
#    expose:
#      - 9100
#    networks:
#      - pi

#  cadvisor:
#    # image: gcr.io/cadvisor/cadvisor-arm:v0.47.2
#    image: zcube/cadvisor:latest
#    # platform: linux/arm64/v8
#    # platform: linux/amd64
#    container_name: monitoring_cadvisor
#    privileged: true
#    restart: unless-stopped
#    command:
#      - "--docker_only=true"
#      - "--housekeeping_interval=30s"
#      - "--disable_metrics=accelerator,cpu_topology,disk,memory_numa,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,resctrl,cpuset,advtcp"
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#    devices:
#      - /dev/kmsg
#    expose:
#      - 8080
#    networks:
#      - pi

#  grafana:
#    platform: linux/arm64/v8
#    image: grafana/grafana:latest
#    container_name: monitoring_grafana
#    restart: unless-stopped
#    ports:
#      - 3000:3000
#    links:
#      - prometheus:prometheus
#      - jellyfin:jellyfin
#    volumes:
#      - ./grafana:/var/lib/grafana
#    environment:
#      - GF_USERS_ALLOW_SIGN_UP=false
#      # - GF_SERVER_DOMAIN=localhost
#      # - GF_SERVER_ROOT_URL=http://localhost/grafana
#      - GF_SERVER_SERVE_FROM_SUB_PATH=true
#    labels:
#      - 'traefik.enable=true'
#      - 'traefik.http.routers.grafana.rule=PathPrefix(`/grafana{regex:$$|/.*}`)'
#      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
#      - 'traefik.frontend.headers.customRequestHeaders=Authorization:-'
#    networks:
#      - pi
  # nginx:
  #   build: nginx
  #   restart: 'unless-stopped'
  #   networks:
  #     - pi
  #   ports:
  #     - '80:80'
  #   depends_on:
  #     - whoami

  # traefik:
  #   image: 'traefik:2.3'
  #   container_name: 'traefik'
  #   restart: 'unless-stopped'
  #   ports:
  #     - '80:80'
  #     - '8080:8080'
  #   volumes:
  #     - '/var/run/docker.sock:/var/run/docker.sock:ro'
  #     - './traefik/config/traefik.toml:/traefik.toml'
  #   networks:
  #     - pi

  # whoami:
  #   image: 'traefik/whoami'
  #   restart: 'unless-stopped'
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.http.routers.whoami.rule=PathPrefix(`/whoami{regex:$$|/.*}`)'
  #     - 'traefik.http.services.whoami.loadbalancer.server.port=80'
  #   networks:
  #     - pi
#   telegraf:
#     image: telegraf:1.16
#     container_name: telegraf
#     restart: always
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock 
#       - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
#     links:
#       - influxdb
#     ports:
#       - "8092:8092/udp"
#       - "8094:8094"
#       - "8125:8125/udp"
#     networks:
#       - tick

#   influxdb:
#     image: influxdb:1.8
#     container_name: influxdb
#     restart: always
#     volumes:
#       - ./influxdb/data:/var/lib/influxdb
#     ports:
#       - "8086:8086"
#     networks:
#       - tick

#   chronograf:
#     image: chronograf:1.8
#     container_name: chronograf
#     restart: always
#     environment:
#       INFLUXDB_URL: http://influxdb:8086
#     volumes:
#       - ./chronograf/data:/var/lib/chronograf
#     ports:
#       - "8888:8888"
#     links:
#       - influxdb
#     networks:
#       - tick
networks:
#   tick:
#     driver: bridge
  pi:
    driver: bridge

  #   # networks:
  #   #   - media_network
  # nginx:
  #   image: nginx
  #   container_name: nginx
  #   restart: unless-stopped
  #   volumes:
  #     - ./nginx/radarr-001-001.conf:/etc/nginx/nginx.conf:ro
  #     # - ./nginx/ssl/nginx-selfsigned.crt:/etc/ssl/certs/nginx-selfsigned.crt:ro
  #     # - ./nginx/ssl/nginx-selfsigned.key:/etc/ssl/private/nginx-selfsigned.key:ro
  #     # - ./nginx/ssl/localhost.crt:/etc/ssl/certs/nginx-selfsigned.crt:ro
  #     # - ./nginx/ssl/localhost.key:/etc/ssl/private/nginx-selfsigned.key:ro
  #     - ./nginx/ssl/home-server.crt:/etc/ssl/certs/nginx-selfsigned.crt:ro
  #     - ./nginx/ssl/home-server.key:/etc/ssl/private/nginx-selfsigned.key:ro
  #     - ./nginx/ssl/dhparam.pem:/etc/ssl/certs/dhparam.pem:ro
  #   ports:
  #     - 80:80  # HTTP port
  #     - 443:443  # HTTPS port (if you're using SSL)
  #   depends_on:
  #     # - plex
  #     - radarr
  #     - sonarr
  #     - jackett
  #     - readarr
  #     - bazarr
